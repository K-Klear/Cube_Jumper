local inputs = {}
local walk_acc = 400 / 2
local fall_acc = 250 / 2
local jump_speed = 120 

go.property("map_size", 12)

function init(self)
	msg.post("/cam_3d#cam_3d", hash("acquire_camera_focus"))
	msg.post("@render:", "use_camera_projection")
	msg.post(".", hash("acquire_input_focus"))
	
	self.face_offset_x = {-3, -1,  1,  3, -1, -1}
	self.face_offset_y = {-1, -1, -1, -1,  1, -3}
	for face = 1, 6 do
		self.face_offset_x[face] = self.face_offset_x[face] * (self.map_size / 2)
		self.face_offset_y[face] = self.face_offset_y[face] * (self.map_size / 2)
	end


	
	self.faces = {hash("left"), hash("front"), hash("right"), hash("back"), hash("top"), hash("bottom")}
	self.map = {}
	self.screen_size = window.get_size()

	local scale = self.screen_size / (256 * self.map_size)

	self.map_object = factory.create("#level_02", vmath.vector3(self.screen_size / 2, self.screen_size / 2, 0), nil, nil, vmath.vector3(scale, scale, 1))

	self.tilemap = msg.url(nil, self.map_object, "layout")
	
	--go.set_scale(vmath.vector3(scale))


	
	
	for key, val in ipairs(self.faces) do
		self.map[val] = {}
	end

	for face = 1, 6 do
		for x = 1, self.map_size do
			self.map[self.faces[face]][x] = {}
			for y = 1, self.map_size do
				self.map[self.faces[face]][x][y] = tilemap.get_tile(self.tilemap, "layer", x + self.face_offset_x[face], y + self.face_offset_y[face])
			end
		end
	end
	self.zoom = 2
	self.collision = vmath.vector3()
	self.movement_vec = vmath.vector3()
	self.deceleration = 0.8
end

function rotate_CCW_90(m)
	local rotated = {}
	for c, m_1_c in ipairs(m[1]) do
		local col = {m_1_c}
		for r = 2, #m do
			col[r] = m[r][c]
		end
		table.insert(rotated, 1, col)
	end
	return rotated
end

function rotate_180(m)
	return rotate_CCW_90(rotate_CCW_90(m))
end

function rotate_CW_90(m)
	return rotate_CCW_90(rotate_CCW_90(rotate_CCW_90(m)))
end

local function redraw_map(self)
	for key, face in ipairs(self.faces) do
		for x, val in pairs(self.map[face]) do
			for y, tile in pairs(val) do
				tilemap.set_tile(self.tilemap, "layer", x + self.face_offset_x[key], y + self.face_offset_y[key], tile)
			end
		end
	end
end

local function check_edge(self, new_pos)
	if new_pos.x > self.screen_size then
		new_pos.x = new_pos.x - self.screen_size
		local front_temp = self.map[hash("front")]
		self.map[hash("front")] = self.map[hash("right")]
		self.map[hash("right")] = self.map[hash("back")]
		self.map[hash("back")] = self.map[hash("left")]
		self.map[hash("left")] = front_temp
		self.map[hash("top")] = rotate_CW_90(self.map[hash("top")])
		self.map[hash("bottom")] = rotate_CCW_90(self.map[hash("bottom")])
		redraw_map(self)
	elseif new_pos.x < 0 then
		new_pos.x = new_pos.x + self.screen_size
		local front_temp = self.map[hash("front")]
		self.map[hash("front")] = self.map[hash("left")]
		self.map[hash("left")] = self.map[hash("back")]
		self.map[hash("back")] = self.map[hash("right")]
		self.map[hash("right")] = front_temp
		self.map[hash("top")] = rotate_CCW_90(self.map[hash("top")])
		self.map[hash("bottom")] = rotate_CW_90(self.map[hash("bottom")])
		redraw_map(self)
	end
	if new_pos.y > self.screen_size then
		new_pos.y = new_pos.y - self.screen_size
		local front_temp = self.map[hash("front")]
		self.map[hash("front")] = self.map[hash("top")]
		self.map[hash("top")] = rotate_180(self.map[hash("back")])
		self.map[hash("back")] = rotate_180(self.map[hash("bottom")])
		self.map[hash("bottom")] = front_temp
		self.map[hash("left")] = rotate_CW_90(self.map[hash("left")])
		self.map[hash("right")] = rotate_CCW_90(self.map[hash("right")])
		redraw_map(self)
	elseif new_pos.y < 0 then
		new_pos.y = new_pos.y + self.screen_size
		local front_temp = self.map[hash("front")]
		self.map[hash("front")] = self.map[hash("bottom")]
		self.map[hash("bottom")] = rotate_180(self.map[hash("back")])
		self.map[hash("back")] = rotate_180(self.map[hash("top")])
		self.map[hash("top")] = front_temp
		self.map[hash("left")] = rotate_CCW_90(self.map[hash("left")])
		self.map[hash("right")] = rotate_CW_90(self.map[hash("right")])
		redraw_map(self)
	end
end



function update(self, dt)
	if dt > 0.1 then dt = 0 end
	self.movement_vec = self.movement_vec * self.deceleration
	if inputs[hash("key_a")] or inputs[hash("key_left")] then
		self.movement_vec.x = self.movement_vec.x - walk_acc * dt
	end
	if inputs[hash("key_d")] or inputs[hash("key_right")] then
		self.movement_vec.x = self.movement_vec.x + walk_acc * dt
	end
	self.movement_vec.y = self.movement_vec.y - fall_acc * dt

	if (self.collision.y < 0 and self.movement_vec.y > 0) or (self.collision.y > 0 and self.movement_vec.y < 0) then
		self.movement_vec.y = 0
	end
	if (self.collision.x < 0 and self.movement_vec.x > 0) or (self.collision.x > 0 and self.movement_vec.x < 0) then
		self.movement_vec.x = 0
	end

	local new_pos = go.get_position() + self.movement_vec

	check_edge(self, new_pos)
	go.set_position(new_pos)

	local half = self.screen_size / 2

	local player_pos = vmath.vector3((new_pos.x - half) / half, (new_pos.y - half) / half, 1)
	local cam_pos = vmath.normalize(player_pos) * self.zoom
	
	local mod
	local dist_x = 1 - math.abs(player_pos.x)
	local dist_y = 1 - math.abs(player_pos.y)
	if dist_x == dist_y then
		mod = 0
	elseif dist_x > dist_y then
		mod = -15 * (1 - (dist_y / dist_x))
	else
		mod = 15 * (1 - (dist_x / dist_y))
	end
	local test = (player_pos.x * player_pos.y) * math.rad(mod)
	local rotation_adjust = vmath.quat_axis_angle(vmath.vector3(0, 0, 1), test)
	local cam_rotation = vmath.quat_from_to(vmath.vector3(0, 0, -1), vmath.normalize(-cam_pos)) * rotation_adjust
	if vmath.length(vmath.vector3(0, 0, -1) + vmath.normalize(-cam_pos)) > 0 then
		go.set("/cam_3d", "rotation", cam_rotation)
	end
	go.set("/cam_3d", "position", cam_pos)

	self.collision = vmath.vector3()
end

function on_message(self, message_id, message, sender)
	if message_id == hash("contact_point_response") then
		if message.other_group == hash("solid") then
			--self.collision = self.collision + message.normal
			if math.abs(message.normal.x) > 0.5 then
				self.collision.x = self.collision.x + message.normal.x
			end
			if math.abs(message.normal.y) > 0.5 then
				self.collision.y = self.collision.y + message.normal.y
			end
		end
	end
end

function on_input(self, action_id, action)
	if action_id then
		inputs[action_id] = not action.released
		if action.pressed then
			if (action_id == hash("key_w") or action_id == hash("key_up")) and self.collision.y > 0 then
				self.movement_vec.y = self.movement_vec.y + jump_speed
			elseif action_id == hash("key_space") then
				msg.post("@render:", hash("switch_camera"))
			end
		end
	end
end
