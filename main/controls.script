local CUBE = require("modules.cube")

local inputs = {}
local walk_acc = 250
local fall_acc = 250
local jump_speed = 200 

function init(self)
	msg.post(".", hash("acquire_input_focus"))

	local scale = go.get_scale().x
	walk_acc = walk_acc * scale
	fall_acc = fall_acc * scale
	jump_speed = jump_speed * scale

	self.zoom = 2
	self.collision = vmath.vector3()
	self.movement_vec = vmath.vector3()
	self.deceleration = 0.8
end

local function redraw_map(self)
	for key, val in pairs(CUBE.tilemap) do
		go.set_position(CUBE.position[key], val)
	end
end

local function check_edge(self, new_pos)
	if new_pos.x > CUBE.screen_size then
		new_pos.x = new_pos.x - CUBE.screen_size
		local front_temp = CUBE.tilemap[hash("front")]
		CUBE.tilemap[hash("front")] = CUBE.tilemap[hash("right")]
		CUBE.tilemap[hash("right")] = CUBE.tilemap[hash("back")]
		CUBE.tilemap[hash("back")] = CUBE.tilemap[hash("left")]
		CUBE.tilemap[hash("left")] = front_temp
		go.set(CUBE.tilemap[hash("top")], "euler.z", go.get(CUBE.tilemap[hash("top")], "euler.z") + 90)
		--CUBE.tilemap[hash("bottom")] = rotate_CCW_90(CUBE.tilemap[hash("bottom")])
		redraw_map(self)
	elseif new_pos.x < 0 then
		new_pos.x = new_pos.x + CUBE.screen_size
		local front_temp = CUBE.tilemap[hash("front")]
		CUBE.tilemap[hash("front")] = CUBE.tilemap[hash("left")]
		CUBE.tilemap[hash("left")] = CUBE.tilemap[hash("back")]
		CUBE.tilemap[hash("back")] = CUBE.tilemap[hash("right")]
		CUBE.tilemap[hash("right")] = front_temp
		go.set(CUBE.tilemap[hash("top")], "euler.z", go.get(CUBE.tilemap[hash("top")], "euler.z") - 90)
		--CUBE.tilemap[hash("top")] = rotate_CCW_90(CUBE.tilemap[hash("top")])
		--CUBE.tilemap[hash("bottom")] = rotate_CW_90(CUBE.tilemap[hash("bottom")])
		redraw_map(self)
	end
	if new_pos.y > CUBE.screen_size then
		new_pos.y = new_pos.y - CUBE.screen_size
		local front_temp = CUBE.tilemap[hash("front")]
		CUBE.tilemap[hash("front")] = CUBE.tilemap[hash("top")]
		CUBE.tilemap[hash("top")] = rotate_180(CUBE.tilemap[hash("back")])
		CUBE.tilemap[hash("back")] = rotate_180(CUBE.tilemap[hash("bottom")])
		CUBE.tilemap[hash("bottom")] = front_temp
		CUBE.tilemap[hash("left")] = rotate_CW_90(CUBE.tilemap[hash("left")])
		CUBE.tilemap[hash("right")] = rotate_CCW_90(CUBE.tilemap[hash("right")])
		redraw_map(self)
	elseif new_pos.y < 0 then
		new_pos.y = new_pos.y + CUBE.screen_size
		local front_temp = CUBE.tilemap[hash("front")]
		CUBE.tilemap[hash("front")] = CUBE.tilemap[hash("bottom")]
		CUBE.tilemap[hash("bottom")] = rotate_180(CUBE.tilemap[hash("back")])
		CUBE.tilemap[hash("back")] = rotate_180(CUBE.tilemap[hash("top")])
		CUBE.tilemap[hash("top")] = front_temp
		CUBE.tilemap[hash("left")] = rotate_CCW_90(CUBE.tilemap[hash("left")])
		CUBE.tilemap[hash("right")] = rotate_CW_90(CUBE.tilemap[hash("right")])
		redraw_map(self)
	end
end



function update(self, dt)
	if dt > 0.1 then dt = 0 end
	self.movement_vec = self.movement_vec * self.deceleration
	if inputs[hash("key_a")] or inputs[hash("key_left")] then
		self.movement_vec.x = self.movement_vec.x - walk_acc * dt
	end
	if inputs[hash("key_d")] or inputs[hash("key_right")] then
		self.movement_vec.x = self.movement_vec.x + walk_acc * dt
	end
	self.movement_vec.y = self.movement_vec.y - fall_acc * dt

	if (self.collision.y < 0 and self.movement_vec.y > 0) or (self.collision.y > 0 and self.movement_vec.y < 0) then
		self.movement_vec.y = 0
	end
	if (self.collision.x < 0 and self.movement_vec.x > 0) or (self.collision.x > 0 and self.movement_vec.x < 0) then
		self.movement_vec.x = 0
	end

	local new_pos = go.get_position() + self.movement_vec

	check_edge(self, new_pos)
	go.set_position(new_pos)

	local half = CUBE.screen_size / 2

	local player_pos = vmath.vector3((new_pos.x - half) / half, (new_pos.y - half) / half, 1)
	local cam_pos = vmath.normalize(player_pos) * self.zoom

	local mod
	local dist_x = 1 - math.abs(player_pos.x)
	local dist_y = 1 - math.abs(player_pos.y)
	if dist_x == dist_y then
		mod = 0
	elseif dist_x > dist_y then
		mod = -15 * (1 - (dist_y / dist_x))
	else
		mod = 15 * (1 - (dist_x / dist_y))
	end
	local test = (player_pos.x * player_pos.y) * math.rad(mod)
	local rotation_adjust = vmath.quat_axis_angle(vmath.vector3(0, 0, 1), test)
	local cam_rotation = vmath.quat_from_to(vmath.vector3(0, 0, -1), vmath.normalize(-cam_pos)) * rotation_adjust
	if vmath.length(vmath.vector3(0, 0, -1) + vmath.normalize(-cam_pos)) > 0 then
		go.set("/cam_3d", "rotation", cam_rotation)
	end
	go.set("/cam_3d", "position", cam_pos)

	self.collision = vmath.vector3()
end

function on_message(self, message_id, message, sender)
	if message_id == hash("contact_point_response") then
		if message.other_group == hash("solid") then
			--self.collision = self.collision + message.normal
			if math.abs(message.normal.x) > 0.5 then
				self.collision.x = self.collision.x + message.normal.x
			end
			if math.abs(message.normal.y) > 0.5 then
				self.collision.y = self.collision.y + message.normal.y
			end
		end
	end
end

function on_input(self, action_id, action)
	if action_id then
		inputs[action_id] = not action.released
		if action.pressed then
			if (action_id == hash("key_w") or action_id == hash("key_up")) and self.collision.y > 0 then
				self.movement_vec.y = self.movement_vec.y + jump_speed
			elseif action_id == hash("key_space") then
				msg.post("@render:", hash("switch_camera"))
			end
		end
	end
end
