local CUBE = require("modules.cube")

function init(self)
	msg.post("/cam_3d#cam_3d", hash("acquire_camera_focus"))
	msg.post("@render:", "use_camera_projection")

	local levels = {
		{factory = "#level_01", size = 6},
		{factory = "#level_02", size = 12}
	}

	local level = 2
	local tilemap_size = 256 * levels[level].size
	local scale = CUBE.screen_size / tilemap_size

	local map_object = factory.create(levels[level].factory, vmath.vector3(CUBE.screen_size / 2, CUBE.screen_size / 2, 0))
	local tm = msg.url(nil, map_object, "layout")
	
	self.face_offset_x = {-3, -1,  1,  3, -1, -1}
	self.face_offset_y = {-1, -1, -1, -1,  1, -3}
	for key, val in pairs(CUBE.faces) do
		self.face_offset_x[key] = self.face_offset_x[key] * (levels[level].size / 2)
		self.face_offset_y[key] = self.face_offset_y[key] * (levels[level].size / 2)
		CUBE.tilemap[val] = factory.create("#map_part", CUBE.position[val], nil, nil, vmath.vector3(scale, scale, 1))
		for x = 1, levels[level].size do
			for y = 1, levels[level].size do
				local tile = tilemap.get_tile(tm, "layer", x + self.face_offset_x[key], y + self.face_offset_y[key])
				tilemap.set_tile(msg.url(nil, CUBE.tilemap[val], "map_base"), "layer", x, y, tile)
			end
		end
	end

	self.player_object = factory.create("#player", vmath.vector3(480, 480, 0.5), nil, nil, vmath.vector3(scale, scale, 1))

	go.delete(map_object)
end